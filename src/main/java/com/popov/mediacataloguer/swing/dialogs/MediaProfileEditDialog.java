package com.popov.mediacataloguer.swing.dialogs;

import com.popov.mediacataloguer.ImportProfile;
import com.popov.mediacataloguer.MediaType;
import com.popov.mediacataloguer.swing.DocumentListenerAdapter;
import com.popov.mediacataloguer.swing.Utils;
import com.popov.mediacataloguer.swing.model.OutputDirPathsByMediaTypesTableModel;
import com.popov.mediacataloguer.utils.icons.IconKind;
import com.popov.mediacataloguer.utils.icons.IconProvider;
import com.popov.mediacataloguer.utils.icons.IconTarget;
import lombok.Getter;

import javax.inject.Inject;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import java.awt.*;
import java.awt.event.*;
import java.util.Optional;

public class MediaProfileEditDialog extends AbstractExecDialog {

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMinimumSize(new Dimension(400, 200));
        contentPane.setPreferredSize(new Dimension(400, 200));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Title:");
        panel3.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textFieldTitle = new JTextField();
        panel3.add(textFieldTitle, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Input directory:");
        panel3.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textFieldInputDirectory = new JTextField();
        textFieldInputDirectory.setEditable(false);
        panel3.add(textFieldInputDirectory, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonInputDirectoryOpen = new JButton();
        buttonInputDirectoryOpen.setText("");
        panel3.add(buttonInputDirectoryOpen, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkBoxRequestInputDirectory = new JCheckBox();
        checkBoxRequestInputDirectory.setText("Request input directory");
        panel3.add(checkBoxRequestInputDirectory, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setToolTipText("");
        panel3.add(panel4, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel4.setBorder(BorderFactory.createTitledBorder(null, "Output directories", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        tableOutputDirectories = new JTable();
        panel4.add(tableOutputDirectories, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        openOutputDirectoryButton = new JButton();
        openOutputDirectoryButton.setEnabled(false);
        openOutputDirectoryButton.setText("");
        panel4.add(openOutputDirectoryButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearOutputDirectoryButton = new JButton();
        clearOutputDirectoryButton.setEnabled(false);
        clearOutputDirectoryButton.setText("");
        panel4.add(clearOutputDirectoryButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel4.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        buttonInputDirectoryClear = new JButton();
        buttonInputDirectoryClear.setText("");
        panel3.add(buttonInputDirectoryClear, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    enum Action {
        Create,
        Edit
    }

    ;

    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JTextField textFieldTitle;
    private JTextField textFieldInputDirectory;
    private JButton buttonInputDirectoryOpen;
    private JCheckBox checkBoxRequestInputDirectory;
    private JTable tableOutputDirectories;
    private JButton buttonInputDirectoryClear;
    private JButton clearOutputDirectoryButton;
    private JButton openOutputDirectoryButton;

    @Getter
    private ImportProfile importProfile = new ImportProfile();
    @Getter
    private Action action = Action.Create;

    final private OutputDirPathsByMediaTypesTableModel outputDirPathsByMediaTypesTableModel = new OutputDirPathsByMediaTypesTableModel();

    final private IconProvider iconProvider;

    @Inject
    public MediaProfileEditDialog(IconProvider iconProvider) {
        this.iconProvider = iconProvider;

        setImportProfile(importProfile);
        setAction(action);
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        contentPane.registerKeyboardAction(event -> reject(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        buttonOK.addActionListener(event -> onOK());
        buttonCancel.addActionListener(event -> dispose());

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        textFieldTitle.getDocument().addDocumentListener(new DocumentListenerAdapter(documentEvent -> validateData()));
        textFieldInputDirectory.getDocument().addDocumentListener(new DocumentListenerAdapter(documentEvent -> validateData()));

        buttonInputDirectoryOpen.setIcon(iconProvider.getIcon(IconKind.FolderOpen, IconTarget.Button));
        buttonInputDirectoryOpen.addActionListener(this::buttonInputDirectoryOpenOnClick);

        buttonInputDirectoryClear.setIcon(iconProvider.getIcon(IconKind.Remove, IconTarget.Button));
        buttonInputDirectoryClear.addActionListener(this::buttonInputDirectoryClearOnClick);

        checkBoxRequestInputDirectory.addActionListener(actionEvent -> validateData());

        tableOutputDirectories.setModel(outputDirPathsByMediaTypesTableModel);
        tableOutputDirectories.getSelectionModel().addListSelectionListener(this::tableOutputDirectoriesSelectionChanged);
        tableOutputDirectories.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        openOutputDirectoryButton.setIcon(iconProvider.getIcon(IconKind.FolderOpen, IconTarget.Button));
        openOutputDirectoryButton.addActionListener(this::openOutputDirectoryButtonOnClick);

        clearOutputDirectoryButton.setIcon(iconProvider.getIcon(IconKind.Remove, IconTarget.Button));
        clearOutputDirectoryButton.addActionListener(this::clearOutputDirectoryButtonOnClick);

        pack();
        Utils.replaceWindow(this);
        this.setIconImage(iconProvider.getIcon(IconKind.Create, IconTarget.WindowIcon).getImage());
        validateData();
    }

    public void setImportProfile(ImportProfile importProfile) {
        this.importProfile = importProfile;
        outputDirPathsByMediaTypesTableModel.setOutputDirPaths(this.importProfile.getOutputDirPaths());
    }

    public void setAction(Action action) {
        this.action = action;
        setTitle(this.action == Action.Create ? "Creating media profile" : "Editing import profile");
    }

    private void onOK() {
        accept();
    }

    private void buttonInputDirectoryOpenOnClick(ActionEvent actionEvent) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            textFieldInputDirectory.setText(fileChooser.getSelectedFile().getPath());
        }
    }

    private void buttonInputDirectoryClearOnClick(ActionEvent actionEvent) {
        textFieldInputDirectory.setText("");
    }

    public boolean isDataValid() {
        return textFieldTitle.getText().trim().length() > 0 &&
                (checkBoxRequestInputDirectory.isSelected() || textFieldInputDirectory.getText().length() > 0) &&
                !importProfile.getOutputDirPaths().isEmpty();
    }

    private void validateData() {
        buttonOK.setEnabled(isDataValid());
    }

    private void tableOutputDirectoriesSelectionChanged(ListSelectionEvent e) {
        Optional<MediaType> mediaType = tableOutputDirectories.getSelectedRow() == -1 ?
                Optional.empty() : Optional.of(MediaType.values()[tableOutputDirectories.getSelectedRow()]);
        openOutputDirectoryButton.setEnabled(mediaType.isPresent() ?
                !importProfile.getOutputDirPaths().containsKey(mediaType.get()) : false);
        clearOutputDirectoryButton.setEnabled(mediaType.isPresent() ?
                !openOutputDirectoryButton.isEnabled() : false);
    }

    private void openOutputDirectoryButtonOnClick(ActionEvent event) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            MediaType mediaType = MediaType.values()[tableOutputDirectories.getSelectedRow()];
            importProfile.getOutputDirPaths().put(mediaType, fileChooser.getSelectedFile().getPath());
            outputDirPathsByMediaTypesTableModel.fireTableDataChanged();
            validateData();
        }
    }

    private void clearOutputDirectoryButtonOnClick(ActionEvent event) {
        MediaType mediaType = MediaType.values()[tableOutputDirectories.getSelectedRow()];
        importProfile.getOutputDirPaths().remove(mediaType);
        outputDirPathsByMediaTypesTableModel.fireTableDataChanged();
        validateData();
    }

    public void save() {
        importProfile.setTitle(textFieldTitle.getText().trim());
        importProfile.setInputDirPath(checkBoxRequestInputDirectory.isSelected() ? Optional.of(textFieldInputDirectory.getText()) : Optional.empty());
        importProfile.setRequestInputDirPath(checkBoxRequestInputDirectory.isSelected());
        importProfile.setOutputDirPaths(outputDirPathsByMediaTypesTableModel.getOutputDirPaths());
    }
}
